# Autogenerated from a Treetop grammar. Edits may be lost.



module RestClient
  include Treetop::Runtime

  def root
    @root ||= :rest_client_definition
  end

  def _nt_rest_client_definition
    start_index = index
    if node_cache[:rest_client_definition].has_key?(index)
      cached = node_cache[:rest_client_definition][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      r1 = _nt_client_definition
      if r1
        s0 << r1
      else
        break
      end
    end
    r0 = instantiate_node(SyntaxNode,input, i0...index, s0)

    node_cache[:rest_client_definition][start_index] = r0

    r0
  end

  module ClientDefinition0
    def client_declaration
      elements[0]
    end

    def client_body
      elements[1]
    end

    def end_block
      elements[2]
    end
  end

  def _nt_client_definition
    start_index = index
    if node_cache[:client_definition].has_key?(index)
      cached = node_cache[:client_definition][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_client_declaration
    s0 << r1
    if r1
      r2 = _nt_client_body
      s0 << r2
      if r2
        r3 = _nt_end_block
        s0 << r3
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(ClientDefinition0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:client_definition][start_index] = r0

    r0
  end

  module ClientDeclaration0
    def padding
      elements[0]
    end

    def client_name
      elements[3]
    end
  end

  def _nt_client_declaration
    start_index = index
    if node_cache[:client_declaration].has_key?(index)
      cached = node_cache[:client_declaration][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_padding
    s0 << r1
    if r1
      if has_terminal?("client", false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 6))
        @index += 6
      else
        terminal_parse_failure("client")
        r2 = nil
      end
      s0 << r2
      if r2
        s3, i3 = [], index
        loop do
          if has_terminal?('\G[\\s]', true, index)
            r4 = true
            @index += 1
          else
            r4 = nil
          end
          if r4
            s3 << r4
          else
            break
          end
        end
        if s3.empty?
          @index = i3
          r3 = nil
        else
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
        end
        s0 << r3
        if r3
          r5 = _nt_client_name
          s0 << r5
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(ClientDeclaration0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:client_declaration][start_index] = r0

    r0
  end

  module ClientName0
  end

  def _nt_client_name
    start_index = index
    if node_cache[:client_name].has_key?(index)
      cached = node_cache[:client_name][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('\G[A-Za-z]', true, index)
      r1 = true
      @index += 1
    else
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        if has_terminal?('\G[A-Za-z0-9_.]', true, index)
          r3 = true
          @index += 1
        else
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      if s2.empty?
        @index = i2
        r2 = nil
      else
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(ClientName0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:client_name][start_index] = r0

    r0
  end

  module ClientBody0
    def padding
      elements[0]
    end

  end

  def _nt_client_body
    start_index = index
    if node_cache[:client_body].has_key?(index)
      cached = node_cache[:client_body][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_padding
    s0 << r1
    if r1
      r3 = _nt_resource_definition
      if r3
        r2 = r3
      else
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(ClientBody0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:client_body][start_index] = r0

    r0
  end

  module ResourceDefinition0
    def resource_declaration
      elements[0]
    end

    def resource_body
      elements[1]
    end

    def end_block
      elements[2]
    end
  end

  def _nt_resource_definition
    start_index = index
    if node_cache[:resource_definition].has_key?(index)
      cached = node_cache[:resource_definition][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_resource_declaration
    s0 << r1
    if r1
      r2 = _nt_resource_body
      s0 << r2
      if r2
        r3 = _nt_end_block
        s0 << r3
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(ResourceDefinition0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:resource_definition][start_index] = r0

    r0
  end

  module ResourceDeclaration0
    def padding
      elements[0]
    end

    def resource_name
      elements[3]
    end
  end

  def _nt_resource_declaration
    start_index = index
    if node_cache[:resource_declaration].has_key?(index)
      cached = node_cache[:resource_declaration][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_padding
    s0 << r1
    if r1
      if has_terminal?("resource", false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 8))
        @index += 8
      else
        terminal_parse_failure("resource")
        r2 = nil
      end
      s0 << r2
      if r2
        s3, i3 = [], index
        loop do
          if has_terminal?('\G[\\s]', true, index)
            r4 = true
            @index += 1
          else
            r4 = nil
          end
          if r4
            s3 << r4
          else
            break
          end
        end
        if s3.empty?
          @index = i3
          r3 = nil
        else
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
        end
        s0 << r3
        if r3
          r5 = _nt_resource_name
          s0 << r5
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(ResourceDeclaration0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:resource_declaration][start_index] = r0

    r0
  end

  module ResourceName0
  end

  def _nt_resource_name
    start_index = index
    if node_cache[:resource_name].has_key?(index)
      cached = node_cache[:resource_name][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('\G[A-Za-z]', true, index)
      r1 = true
      @index += 1
    else
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        if has_terminal?('\G[A-Za-z0-9_]', true, index)
          r3 = true
          @index += 1
        else
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      if s2.empty?
        @index = i2
        r2 = nil
      else
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(ResourceName0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:resource_name][start_index] = r0

    r0
  end

  module ResourceBody0
    def padding
      elements[0]
    end

  end

  def _nt_resource_body
    start_index = index
    if node_cache[:resource_body].has_key?(index)
      cached = node_cache[:resource_body][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_padding
    s0 << r1
    if r1
      r3 = _nt_method_definition
      if r3
        r2 = r3
      else
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(ResourceBody0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:resource_body][start_index] = r0

    r0
  end

  module MethodDefinition0
    def method_verb
      elements[0]
    end

    def endpoint_pattern
      elements[2]
    end
  end

  def _nt_method_definition
    start_index = index
    if node_cache[:method_definition].has_key?(index)
      cached = node_cache[:method_definition][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_method_verb
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        if has_terminal?('\G[\\s]', true, index)
          r3 = true
          @index += 1
        else
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      if s2.empty?
        @index = i2
        r2 = nil
      else
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      end
      s0 << r2
      if r2
        r4 = _nt_endpoint_pattern
        s0 << r4
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(MethodDefinition0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:method_definition][start_index] = r0

    r0
  end

  def _nt_method_verb
    start_index = index
    if node_cache[:method_verb].has_key?(index)
      cached = node_cache[:method_verb][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    if has_terminal?("get", false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 3))
      @index += 3
    else
      terminal_parse_failure("get")
      r1 = nil
    end
    if r1
      r0 = r1
    else
      if has_terminal?("post", false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 4))
        @index += 4
      else
        terminal_parse_failure("post")
        r2 = nil
      end
      if r2
        r0 = r2
      else
        if has_terminal?("put", false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 3))
          @index += 3
        else
          terminal_parse_failure("put")
          r3 = nil
        end
        if r3
          r0 = r3
        else
          if has_terminal?("delete", false, index)
            r4 = instantiate_node(SyntaxNode,input, index...(index + 6))
            @index += 6
          else
            terminal_parse_failure("delete")
            r4 = nil
          end
          if r4
            r0 = r4
          else
            @index = i0
            r0 = nil
          end
        end
      end
    end

    node_cache[:method_verb][start_index] = r0

    r0
  end

  def _nt_endpoint_pattern
    start_index = index
    if node_cache[:endpoint_pattern].has_key?(index)
      cached = node_cache[:endpoint_pattern][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      if has_terminal?('\G[A-Za-z0-9._\\-/]', true, index)
        r1 = true
        @index += 1
      else
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
    end

    node_cache[:endpoint_pattern][start_index] = r0

    r0
  end

  def _nt_padding
    start_index = index
    if node_cache[:padding].has_key?(index)
      cached = node_cache[:padding][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    r1 = _nt_whitespace
    if r1
      r0 = r1
    else
      r0 = instantiate_node(SyntaxNode,input, index...index)
    end

    node_cache[:padding][start_index] = r0

    r0
  end

  def _nt_whitespace
    start_index = index
    if node_cache[:whitespace].has_key?(index)
      cached = node_cache[:whitespace][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      if has_terminal?('\G[\\s\\t\\n]', true, index)
        r1 = true
        @index += 1
      else
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    r0 = instantiate_node(SyntaxNode,input, i0...index, s0)

    node_cache[:whitespace][start_index] = r0

    r0
  end

  module EndBlock0
  end

  def _nt_end_block
    start_index = index
    if node_cache[:end_block].has_key?(index)
      cached = node_cache[:end_block][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?("end", false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 3))
      @index += 3
    else
      terminal_parse_failure("end")
      r1 = nil
    end
    s0 << r1
    if r1
      r3 = _nt_padding
      if r3
        r2 = r3
      else
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(EndBlock0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:end_block][start_index] = r0

    r0
  end

end

class RestClientParser < Treetop::Runtime::CompiledParser
  include RestClient
end
